{
  "name": "sassdown-v",
  "description": "Grunt plugin for building living styleguides with Handlebars from Markdown comments in CSS, SASS and LESS files. This is an extension of the awesome sassdown plugin developed by Jesper Hills http://www.nopr.co. I have customized it remove iframes and suit my needs better. https://github.com/nopr/sassdown is the homepage of the original project",
  "version": "0.2.6",
  "author": {
    "name": "Vinay Raghu",
    "email": "rvinay88@gmail.com",
    "url": "http://viii.in"
  },
  "homepage": "http://github.com/rvinay88/sassdown.git",
  "repository": {
    "type": "git",
    "url": "git://github.com/rvinay88/sassdown.git"
  },
  "bugs": {
    "url": "https://github.com/rvinay88/sassdown/issues"
  },
  "licenses": [
    {
      "type": "Creative Commons",
      "url": "http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "dependencies": {
    "junk": "~0.2.2",
    "cssmin": "~0.4.1",
    "marked": "~0.2.10",
    "handlebars": "~1.3.0",
    "highlight.js": "~8.0.0"
  },
  "readme": "# sassdown\r\n\r\n> Grunt plugin for building living styleguides with Handlebars from Markdown comments in CSS, SASS and LESS files.\r\n\r\n**Note: *This plugin is still in active development!* So expect it to be a little rough around the edges. If you have any questions, issues or suggestions get in touch. Currently on version `0.2.6`.**\r\n\r\n1. [Getting started](#getting-started)\r\n2. [Sassdown task](#sassdown-task)\r\n    - [Overview](#overview)\r\n    - [Options](#options)\r\n    - [Usage](#usage)\r\n3. [Markdown](#markdown)\r\n4. [Handlebars](#handlebars)\r\n5. [Highlight.js](#highlightjs)\r\n6. [Data Objects](#data-objects)\r\n    - [Page](#page)\r\n    - [Pages](#pages)\r\n7. [Template](#template)\r\n8. [SASS](#sass)\r\n\r\n### What's new in version 0.2.6?\r\n\r\n- Path resolving is relative; no more issues serving from localhost or using file:// protocols\r\n- Whitespace and preformatting is preserved in markup results\r\n- Source styles shown in conjunction with markup and result\r\n- Pages are served form an array-literal node tree; meaning clearer and nested navigation\r\n- Comment block matching is modifiable via regular expressions\r\n- Choice of syntax highlighting styles from various popular Highlight.js themes\r\n- Syntax highlighting is done with Node before templates compile; faster page loads\r\n\r\n## Getting started\r\n\r\nInstall this plugin with this command:\r\n\r\n```bash\r\nnpm install sassdown --save-dev\r\n```\r\n\r\nEnabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('sassdown');\r\n```\r\n\r\n## Sassdown Task\r\n\r\nRun the task using `grunt sassdown`. Task targets, files and options may be specified according to the grunt [configuring tasks](http://gruntjs.com/configuring-tasks) guide.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `sassdown` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\nsassdown: {\r\n    options: {\r\n        // Task-specific options go here.\r\n    },\r\n    target: {\r\n        // Target-specific file lists and/or options go here.\r\n    },\r\n},\r\n```\r\n\r\n### Options\r\n\r\n#### options.assets\r\nType: `Array`<br/>\r\nDefault: `null`\r\n\r\n*Optional*. Array of file paths. Will be included into the styleguide output. Supports [globbing](http://gruntjs.com/configuring-tasks#globbing-patterns). Supports relative and absolute file paths (eg. `http://`, `https://` or even `file://`).\r\n\r\n#### options.template\r\nType: `String`<br/>\r\nDefault: `null`\r\n\r\n*Optional*. A path to a Handlebars template file. Will use default Sassdown template if left blank.\r\n\r\n#### options.theme\r\nType: `String`<br/>\r\nDefault: `null`\r\n\r\n*Optional*. A path to a theme stylesheet. Will use default Sassdown theme if left blank.\r\n\r\n#### options.readme\r\nType: `String`<br/>\r\nDefault: `null`\r\n\r\n*Optional*. Path to a README file. When set, this file will be parsed with Markdown and used as the index page for the styleguide.\r\n\r\n#### options.highlight\r\nType: `String`<br/>\r\nDefault: `github`\r\n\r\n*Optional*. Choice of syntax highlighting style. Defaults to `github`, but other available options are: `docco`, `monokai`, `solarized-light`, `solarized-dark` or `xcode`.\r\n\r\n#### options.commentStart\r\nType: `RegExp`<br/>\r\nDefault: `/\\/\\*/`\r\n\r\n*Optional*. A regular expression to match beginning part of a comment block. Defaults to regular block comment (`/*`).\r\n\r\n#### options.commentEnd\r\nType: `RegExp`<br/>\r\nDefault: `/\\*\\//`\r\n\r\n*Optional*. A regular expression to match ending part of a comment block. Defaults to regular block comment (`*/`).\r\n\r\n#### options.excludeMissing\r\nType: `Boolean`<br/>\r\nDefault: `false`\r\n\r\n*Optional*. When set to true, Sassdown will ignore any files that do not contain matching or valid comment blocks.\r\n\r\n### Usage\r\n\r\nYou will need to use an [expanded files object](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically), but here is roughly the minimum configuration required.\r\n```js\r\nsassdown: {\r\n    styleguide: {\r\n        options: {\r\n            assets: ['public/css/*.css']\r\n        },\r\n        files: [{\r\n            expand: true,\r\n            cwd: 'src/sass',\r\n            src: ['*.scss'],\r\n            dest: 'public/styleguide/'\r\n        }]\r\n    }\r\n},\r\n```\r\n\r\nOn larger projects you may need to include additional assets and customise the output with a user theme and template.\r\n```js\r\nsassdown: {\r\n    styleguide: {\r\n        options: {\r\n            assets: [\r\n                'public/css/**/*.min.css',\r\n                'public/js/*.min.js',\r\n                'http://use.typekit.net/sea5yvm.js',\r\n            ],\r\n            theme: 'src/styleguide/theme.css',\r\n            template: 'src/styleguide/template.hbs',\r\n            readme: 'src/assets/sass/readme.md',\r\n            highlight: 'monokai',\r\n            excludeMissing: true\r\n        },\r\n        files: [{\r\n            expand: true,\r\n            cwd: 'src/assets/sass',\r\n            src: [\r\n                'partials/**/*.{scss,sass}',\r\n                'modules/**/*.{scss,sass}'\r\n            ],\r\n            dest: 'public/styleguide/'\r\n        }]\r\n    }\r\n},\r\n```\r\n\r\n# Markdown\r\n\r\nSassdown uses [Markdown](https://github.com/chjj/marked) to parse any block comments in your SASS files. From these, it generates the text content in the styleguide. Any recognised code blocks will be rendered as HTML/SCSS source-result pairs.\r\n\r\n## Structure\r\n\r\nYou may use any Markdown-compatible [heading syntax](https://github.com/nopr/sassdown/issues/7) you like. You may use any common style of [block-comment syntax](https://github.com/nopr/sassdown/issues/12#issuecomment-28219982) you like. Code blocks may be fenced or indented (four spaces). Below are several examples; each will be correctly parsed by Sassdown into identical output.\r\n\r\n### Example .scss file\r\n\r\n```scss\r\n/*\r\n\r\nAlerts\r\n======\r\n\r\nCreates an alert box notification using the `.alert-` prefix. The following options are available:\r\n\r\n    <div class=\"alert-success\">Success</div> \r\n    <div class=\"alert-warning\">Warning</div> \r\n    <div class=\"alert-error\">Error</div>\r\n\r\n*/\r\n@mixin alert($colour){\r\n    color: darken($colour, 50%);\r\n    background: $colour;\r\n    border-radius: 5px;\r\n    margin-bottom: 1em;\r\n    padding: 1em;\r\n}\r\n.alert-success { @include alert(#e2f3c1) }\r\n.alert-warning { @include alert(#fceabe) }\r\n.alert-error   { @include alert(#ffdcdc) }\r\n```\r\n\r\n# Handlebars\r\n\r\n[Handlebars](http://handlebarsjs.com/) is a semantic templating syntax. Put simply, it allows you to output dynamic properties in HTML using `{{var}}` from a variety of data sources such as JSON.\r\n\r\nSassdown uses Handlebars to output data from the [data objects](#data-objects) it creates. Your `.hbs` file specified in the `template` option may contain code that looks like this for example:\r\n\r\n```html\r\n{{#each page.sections}}\r\n    <div class=\"section\">\r\n        {{#if comment}}\r\n            <div class=\"comment\">{{{comment}}}</div>\r\n        {{/if}}\r\n        {{#if result}}\r\n            <div class=\"result\">{{{result}}}</div>\r\n        {{/if}}\r\n        {{#if markup}}\r\n            <div class=\"markup\">{{{markup}}}</div>\r\n        {{/if}}\r\n        {{#if styles}}\r\n            <div class=\"styles\">{{{styles}}}</div>\r\n        {{/if}}\r\n    </div>\r\n{{/each}}\r\n```\r\n\r\n### Common partials\r\n\r\nSassdown also provides a series of Handlebars **partials**, which can be used to output specific information on each page. These are:\r\n\r\n* `{{> root}}`<br>Outputs a path to the root directory of the styleguide, relative to whatever page you are on.\r\n \r\n* `{{> assets}}`<br>Outputs a set of `<link />` or `<script>` tags that include assets specified in the Grunt task options.\r\n \r\n* `{{> theme}}`<br>Outputs the theme stylesheet, minified, into a `<style>` tag.\r\n\r\n# Highlight.js\r\n\r\nSassdown uses the popular and well-supported [Highlight.js](http://highlightjs.org/) for syntax highlighting. Markup is parsed by a Node module and highlighted before being output through the template. Various popular themes are supported via the task options.\r\n\r\n# Data Objects\r\n\r\nTwo objects are parsed into the Handlebars template; `Page` and `Pages`. **Page** contains json data for the current page only; **Pages** is an array literal containing all Page objects in a nested node tree.\r\n\r\nAny property within these objects can be output by Handlebars using `{{helpers}}`. You can iterate through objects using `{{#each}} ... {{/each}}`, for example.\r\n\r\n## Page\r\n\r\n```js\r\n{\r\n  title: 'Alerts',\r\n  slug: '_alerts',\r\n  href: 'objects/user/_alerts.html',\r\n  dest: 'test/example/styleguide/objects/user/_alerts.html',\r\n  src: 'test/example/assets/sass/partials/objects/user/_alerts.scss',\r\n  sections: [ \r\n    {\r\n      id: 'mswbu',\r\n      comment: '<h1 id=\"alerts\">Alerts</h1>\\n<p>Creates an alert box notification using the <code>.alert-</code> prefix. The following options are available:</p>\\n',\r\n      result: '\\n<div class=\"alert-success\">Success</div> \\n<div class=\"alert-warning\">Warning</div> \\n<div class=\"alert-error\">Error</div>\\n',\r\n      markup: '<pre><code><span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >class</span><span class=\"token attr-value\" ><span class=\"token punctuation\" >=</span>&quot;alert-success&quot;&gt;</span></span>Success<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >&gt;</span></span> \\n<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >class</span><span class=\"token attr-value\" ><span class=\"token punctuation\" >=</span>&quot;alert-warning&quot;&gt;</span></span>Warning<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >&gt;</span></span> \\n<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >class</span><span class=\"token attr-value\" ><span class=\"token punctuation\" >=</span>&quot;alert-error&quot;&gt;</span></span>Error<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >&gt;</span></span></code></pre>\\n',\r\n      styles: '<pre><code><span class=\"token keyword\" >@mixin</span> alert(<span class=\"token variable\" >$colour</span>)<span class=\"token punctuation\" >{</span>\\n    <span class=\"token property\" >color</span><span class=\"token punctuation\" >:</span> darken(<span class=\"token variable\" >$colour</span>, 50%)<span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >background</span><span class=\"token punctuation\" >:</span> <span class=\"token variable\" >$colour</span><span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >border-radius</span><span class=\"token punctuation\" >:</span> 5px<span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >margin-bottom</span><span class=\"token punctuation\" >:</span> 1em<span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >padding</span><span class=\"token punctuation\" >:</span> 1em<span class=\"token punctuation\" >;</span>\\n<span class=\"token punctuation\" >}</span>\\n\\n.alert-success <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >@include</span> alert(#e2f3c1) <span class=\"token punctuation\" >}</span>\\n.alert-warning <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >@include</span> alert(#fceabe) <span class=\"token punctuation\" >}</span>\\n.alert-error   <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >@include</span> alert(#ffdcdc) <span class=\"token punctuation\" >}</span></code></pre>\\n'\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Pages\r\n\r\n```js\r\n[\r\n  {\r\n    name: 'base',\r\n    isDirectory: true,\r\n    pages: [\r\n      [Object],\r\n      {\r\n        name: 'typography',\r\n        isDirectory: true,\r\n        pages: [\r\n          [Object],\r\n          [Object],\r\n          [Object]\r\n        ]\r\n      },\r\n      [Object],\r\n      [Object]\r\n    ]\r\n  },\r\n  {\r\n    name: 'partials',\r\n    isDirectory: true,\r\n    pages: [\r\n      [Object],\r\n      [Object]\r\n    ]\r\n  },\r\n  {\r\n    name: 'modules',\r\n    isDirectory: true,\r\n    pages: [\r\n      [Object] \r\n    ]\r\n  },\r\n  {\r\n    name: 'objects',\r\n    isDirectory: true,\r\n    pages: [\r\n      [Object],\r\n      [Object], \r\n      [Object]\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n# Template\r\n\r\nShould you wish to create a new Sassdown template, you may wish to use the [existing default template.hbs](https://github.com/nopr/sassdown/blob/master/tasks/data/template.hbs) as a base to work from. \r\n\r\n# Sass\r\n\r\nIt should be noted that, despite the name, Sassdown does not explicitly read only SASS files. It works just fine with .sass, .less, .css or even .txt files.\r\n\r\nSassdown **does not** compile your source files. Assuming you are using SASS, and since you're using Grunt, I would recommend the [grunt-contrib-compass](https://github.com/gruntjs/grunt-contrib-compass) plugin for this task. However you may also want to look at [grunt-contrib-stylus](https://github.com/gruntjs/grunt-contrib-stylus).\r\n\r\n# Project Milestones\r\n\r\n*Current [milestones](https://github.com/nopr/sassdown/issues/milestones) for this project*\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n",
  "readmeFilename": "README.md",
  "_id": "sassdown-v@0.2.6",
  "_from": "sassdown-v@^0.2.6"
}
